class Solution {
public:
    int longestPalindromeSubseq(string s) {
        int n=s.size();
        if (n == 1)
            return 1;
        if (n == 2)
            return s[0] == s[1] ? 2 : 1;
        // total palindromic
        int l = 0, r = n - 1;
        while (l <= r){
            if (s[l] != s[r])
                break;
            l++, r--;
        }
        if (l > r)
            return n;
        int dp[n][n],maxi=1;
        for(int i=0;i<n;i++)
            dp[i][i]=1;
        for(int i=0;i<n-1;i++)
        {
            if(s[i]==s[i+1])
                dp[i][i+1]=2;
            else
                dp[i][i+1]=1;
            maxi=max(dp[i][1+i],maxi);
        }
        for(int i=2;i<n;i++)
        {
            for(int j=0;j+i<n;j++)
            {
                if(s[j]==s[i+j])
                    dp[j][j+i]=2+dp[j+1][i+j-1];
                else
                    dp[j][j+i]=max(dp[j][i+j-1],dp[j+1][i+j]);
                maxi=max(dp[j][j+i],maxi);
            }
        }
        return maxi;
    }
};
